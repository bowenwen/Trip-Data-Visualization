shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(plyr)
library(tidyverse)
library(plotly)
library(leaflet)
library(data.table)
library(DT)
library(googleway)
library(RColorBrewer)
#global variables ####
#google maps basemap tiles
map_url_google <-"https://mts1.google.com/vt/lyrs=m&hl=en&src=app&x={x}&y={y}&z={z}&s=G"
#map zoom level
zoom_level <- 11
#google api key for googleway
my_key <- readLines('api_key.txt')
#link to source code
githubrepo <- "https://github.com/moh-salah/Trip-Data-Visualization"
#data file name
data_file <- "real_data.txt" # "fake_data.txt" #
#read data
df <- fread(data_file,na.strings=c("","NA"))
#define a household person id for each unique person
df$hhprs_ID <- paste(df$household_id, df$person_id, sep="-")
#count number of days for each person
df <- ddply(df,.(hhprs_ID),transform, days = length(unique(day_number)))
#define mode for googleway input
df$g_mode <-
ifelse(
df$mode %in% c("Walk", 'Walking', 'On foot'),
'walking',
ifelse(
df$mode %in% c(
"Other bus",
"SkyTrain",
"SeaBus",
"Westcoast Express",
"Handydart",
"Transit bus",
"School bus",
'Bus',
'Train',
'Transit'
),
'transit',
ifelse(
df$mode %in% c('Bike', 'Biking', 'Bicycling', "Bicycle"),
'bicycling',
'driving'
)
)
)
#define list of person ids and the number of travel days
#this is used later to define the conditional selection of days
pers_days <- unique(df[c("hhprs_ID", "days")])
maxdays <- reactive({
pers_days$days[pers_days$hhprs_ID==input$hhprs_ID]
})
maxdays <- pers_days$days[pers_days$hhprs_ID==input$hhprs_ID]
maxdays <- pers_days$days[pers_days$hhprs_ID]
rm(maxdays)
runApp()
runApp()
View(polylines)
View(polylines)
runApp()
runApp()
View(directions)
View(points)
runApp()
View(directions)
tmp<-df_sub()[x,c('start_lat','start_lon')]
View(tmp)
View(tmp)
tmp<-df_sub()
View(tmp)
runApp()
runApp()
View(directions)
View(points)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(1)
a<-str(1)
warning(
paste0(
"Row ",
1,
" had no google direction result, using straight line distance instead."
)
)
warning(
paste0(
"Row ",
str(1),
" had no google direction result, using straight line distance instead."
)
)
a<-str(1)
str(!)
print(1)
print(1)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
source('U:/Projects/Data Collection/Trip Diary 2017/Data/Trip-Data-Visualization/app_emp.r')
library(shiny)
library(shinydashboard)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
remove.packages("leaflet", lib="~/R/win-library/3.4")
install.packages("leaflet")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
